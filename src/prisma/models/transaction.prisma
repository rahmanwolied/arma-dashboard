model Transaction {
    id String @id @default(cuid())

    // Foreign Keys
    customerId String

    // Transaction-level details
    serialNumber Int?
    remarks      String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    customer         Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
    transactionItems TransactionItem[]

    @@map("transactions")
}

enum PaymentStatus {
    PENDING
    PAID
    PARTIALLY_PAID
}

enum PaymentMethod {
    CASH
    BANK_TRANSFER
    MOBILE_MONEY
}

model TransactionItem {
    id String @id @default(cuid())

    // Foreign Keys
    transactionId String
    cattleId      String

    // Sale Details (per cow)
    estimatedSalePriceKg Int
    actualSalePriceKg    Int
    totalPrice           Int

    paymentStatus PaymentStatus  @default(PENDING)
    paymentDate   DateTime?
    paymentMethod PaymentMethod?
    paidAmount    Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    cattle      Cattle      @relation(fields: [cattleId], references: [id], onDelete: Cascade)

    // Ensure one cattle per transaction (prevent duplicates)
    @@unique([transactionId, cattleId])
    @@map("transaction_items")
}
